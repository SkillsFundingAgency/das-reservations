@using Microsoft.CodeAnalysis.CSharp.Syntax
@using SFA.DAS.Reservations.Web.Extensions
@model ApprenticeshipTrainingViewModel
@{
    ViewData["Title"] = "Select apprenticeship training course start date";

    var firstStartDate = Model.PossibleStartDates.FirstOrDefault()?.Id;

    var customErrorKeys = new Dictionary<string, string>
    {
        { "StartDate", $"StartDate-{firstStartDate}" }
    };

    ViewData["CustomErrorKeys"] = customErrorKeys;

    var courseInvalid = !ViewData.ModelState.IsValid &&
                        ViewData.ModelState.ContainsKey("SelectedCourseId") &&
                        ViewData.ModelState["SelectedCourseId"].Errors != null &&
                        ViewData.ModelState["SelectedCourseId"].Errors.Any();

    var startDateInvalid = !ViewData.ModelState.IsValid
                           && ViewData.ModelState.ContainsKey("StartDate") &&
                           ViewData.ModelState["StartDate"].Errors != null &&
                           ViewData.ModelState["StartDate"].Errors.Any();

    var routeData = new Dictionary<string, string>
    {
        {"CohortReference",Model.CohortRef},
        {"employerAccountId", (string)ViewContext.RouteData.Values["employerAccountId"]},
        {"id", (string)ViewContext.RouteData.Values["id"]}
    };

    if (Model.IsProvider)
    {
        ViewBag.GaData.Vpv = "/reservations/apprenticeship-training";
    }
    else
    {
        ViewBag.GaData.Vpv = "/accounts/reservations/apprenticeship-training";
    }
}

@if (!string.IsNullOrEmpty(Model.BackLink))
{
    if (!Model.IsProvider)
    {
        <a asp-route="@Model.BackLink" asp-all-route-data="@routeData" class="govuk-back-link">Back</a>
    }
    else
    {
        if (string.IsNullOrEmpty(Model.CohortRef))
        {
            <a asp-route="@Model.BackLink" class="govuk-back-link">Back</a>
        }
        else
        {
            <a href="@Model.BackLink" class="govuk-back-link">Back</a>
        }
    }
}

<main class="govuk-main-wrapper " id="main-content" role="main">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            <partial name="_PageErrorsOverview" />

            @if (Model.IsProvider)
            {
                <h1 class="govuk-heading-xl">Apprenticeship training</h1>
            }
            else
            {
                <h1 class="govuk-heading-xl">When will the apprentice start their apprenticeship training?</h1>
            }

            <form method="post" asp-route="@Model.RouteName" class="validate-auto-complete">

                <input id="accountLegalEntityPublicHashedId" name="accountLegalEntityPublicHashedId" type="hidden" value="@Model.AccountLegalEntityPublicHashedId" />
                <input id="cohortRef" name="CohortRef" type="hidden" value="@Model.CohortRef" />
                <input id="fromReview" name="FromReview" type="hidden" value="@(Model.FromReview.HasValue ? Model.FromReview.Value.ToString() : "false")" />

                @if (Model.IsProvider)
                {
                    <div class="govuk-form-group @(courseInvalid ? "govuk-form-group--error" : "")">
                        <h2 class="govuk-heading-m">Which apprenticeship training will the apprentice take?</h2>

                        <label class="govuk-label" for="course-search">
                            Search for a course
                        </label>
                        <partial name="_CourseSearch" />
                        <span id="choose-apprenticeship-hint" class="govuk-hint govuk-!-margin-top-4">
                            This information can be changed later.
                        </span>
                    </div>
                }
                else
                {
                    <input asp-for="CourseId" name="SelectedCourseId" type="hidden" />
                }
                <div class="govuk-form-group @(startDateInvalid ? "govuk-form-group--error" : "")">
                    <fieldset class="govuk-fieldset">
            
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--m  @(Model.IsProvider ? "" : "govuk-visually-hidden")">
                            <h2 class="govuk-fieldset__heading">
                                When will the apprenticeship training start?
                            </h2>
                        </legend>

                        <div class="govuk-hint">
                            Apprenticeship already started.
                        </div>

                        @if (startDateInvalid)
                        {
                            var startDateModelState = @ViewData.ModelState["StartDate"];

                            if (startDateModelState.Errors != null && startDateModelState.Errors.Any())
                            {
                                <span id="StartDate" class="govuk-error-message">
                                    @startDateModelState.Errors.First().ErrorMessage
                                </span>
                            }
                        }

                        <div class="govuk-radios govuk-!-margin-bottom-6">
                            <div class="govuk-radios__item">
                                <input class="govuk-radios__input" id="StartDate-alreadyStarted" name="StartDate" type="radio" value="@Model.PastStartDate.SerializedModel" checked="@Model.PastStartDate.Checked">
                                <label class="govuk-label govuk-radios__label" for="StartDate-alreadyStarted">
                                    @Model.PastStartDate.StartDate.GetGDSLongDateString()
                                </label>
                            </div>
                        </div>
                        
                        <div class="govuk-hint">
                            Planned start date of the apprenticeship.
                        </div>

                        @await Html.PartialAsync("_GlobalRuleInfo", Model.ActiveGlobalRule)

                        <div class="govuk-radios" data-validation-message="You must select a start date" data-validation-summary-message="Select a start date">
                            @foreach (var possibleStartDate in Model.PossibleStartDates)
                            {
                                <div class="govuk-radios__item">
                                    <input class="govuk-radios__input" id="StartDate-@possibleStartDate.Id" name="StartDate" type="radio" value="@possibleStartDate.SerializedModel" checked="@possibleStartDate.Checked">
                                    <label class="govuk-label govuk-radios__label" for="StartDate-@possibleStartDate.Id">
                                        @possibleStartDate.StartDate.GetGDSLongDateString()
                                    </label>
                                </div>
                            }
                        </div>
                    </fieldset>
                </div>
                <button type="submit" class="govuk-button">
                    Save and continue
                </button>
            </form>
        </div>
    </div>
</main>